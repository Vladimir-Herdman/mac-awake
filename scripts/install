#!/usr/bin/env bash
# This script is intended for a UNIX based system.  If you're raw windows, consider
# WSL, or figure it out.

source "$(dirname "$0")/globals"

get_root_dir_path() {
    local root_dir; root_dir=$(pwd)
    if [[ $(basename "$root_dir") != "$PROJECT_NAME" ]]; then
        root_dir="${root_dir%%"$PROJECT_NAME"*}$PROJECT_NAME"
    fi
    printf "%s" "$root_dir"
}

main() {
    if [[ -d "$INSTALL_DIR" ]]; then
        true;
    else
        printf "%s\n" "  Creating directory to store script locally at: $INSTALL_DIR"
        mkdir -p "$INSTALL_DIR"
    fi

    local root_dir; root_dir="$(get_root_dir_path)"
    cd "$root_dir" || exit 1

    local cur_script_path; cur_script_path="$root_dir/src/$SCRIPT_NAME"
    printf "%s\n" "  * Copying script to installation directory at: $INSTALL_DIR/$SCRIPT_NAME"
    cp -f "$cur_script_path" "$INSTALL_DIR/$SCRIPT_NAME"

    if [[ ":$PATH:" == *":$INSTALL_DIR:"* ]]; then
        printf "%s\n" "  * You may now call '$SCRIPT_NAME' to use this script (open new terminal or source)"
    else
        local current_shell; current_shell="$SHELL"
        if [[ "$current_shell" == *'zsh'* ]]; then
            printf "%s\n" "  * Adding path export to shell configuration file: $HOME/.zshrc"
            printf "%s%s" 'export PATH=$PATH:' "$INSTALL_DIR" >> "$HOME/.zshrc"
            printf "%s\n" "  * You may now call '$SCRIPT_NAME' to use this script, but open a new shell instance first"
        elif [[ "$current_shell" == *'bash'* ]]; then
            printf "%s\n" "  * Adding path export to shell configuration file: $HOME/.bashrc"
            printf "%s%s" 'export PATH=$PATH:' "$INSTALL_DIR" >> "$HOME/.bashrc"
            printf "%s\n" "  * You may now call '$SCRIPT_NAME' to use this script, but open a new shell instance first"
        else
            printf "%s\n" "  * Add '$INSTALL_DIR' directory to shell PATH in order to use script"
        fi
    fi
}

main
